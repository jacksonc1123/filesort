#!/usr/bin/python
# script to sort files by file type

# version info
__version__ = '1.0'
__author__ = 'Cameron P. Jackson'

# Modules imported
import os
import sys
import subprocess
import glob
import argparse
import getpass

##### globals #####
# The username
user=getpass.getuser()

# dictionary of destinations
# PLEASE READ BEFORE EDITING
# You MUST include at '*.' at least at the beginning of the extension type.
# All directory paths must be absolute and begin with '/' for the root
# directory. The {0} and consequently the '.format(user)'
# takes the place of the user directory so leave that in there otherwise
# it will break. 
dest_list={
    '*.mp3' : "/home/{0}/Music".format(user),
    '*.doc*': "/home/{0}/Documents".format(user),
    '*.ppt' : "/home/{0}/Documents".format(user),
    '*.txt' : "/home/{0}/Documents".format(user),
    '*.tex' : "/home/{0}/Documents".format(user),
    '*.tar*': "/home/{0}/Compressed".format(user),
    '*.zip' : "/home/{0}/Compressed".format(user),
    '*.7z'  : "/home/{0}/Compressed".format(user),
    '*.rar' : "/home/{0}/Compressed".format(user),
    '*.pdf' : "/home/{0}/Pdf".format(user),
    '*.epub': "/home/{0}/Books".format(user),
    '*.jpg' : "/home/{0}/Images".format(user),
    '*.jpeg': "/home/{0}/Images".format(user),
    '*.png' : "/home/{0}/Images".format(user),
}

# sortfiles function
def sortfiles(src,dest,ext):
    if ext == "all":
        for key in dest_list:
            # print(os.path.join(src,key))
            glist = glob.glob(os.path.join(src,key))
            for f in glist:
                try:
                    subprocess.call(["mv",f,dest_list[key]])
                except OSError as e:
                    print("***Execution failed:", e)
                    
    else:
        # make sure a destination is specified for file extension
        if dest == src:
            sys.exit("Please specify a destination for this extension")

        if ext[0] != '.':
            # print(os.path.join(src,'*.'+ext))
            glist = glob.glob(os.path.join(src,'*.'+ext))
        else:
            glist = glob.glob(os.path.join(src,'*'+ext))

        for f in glist:
            try:
                subprocess.call(["mv",f,dest])
            except OSError as e:
                print("***Execution failed:", e)
        
# main function
if __name__ == '__main__':
    # get number of arguments passed to function
    numargs = len(sys.argv)
    # defaults
    arg_parser = argparse.ArgumentParser(
        description='sorts files in directory by file extension.')
    arg_parser.add_argument(
        '-e', '--ext', metavar='EXT', default='all',
        help='sort by this file extension')
    arg_parser.add_argument(
        '-f', '--force', action='store_true',
        help='create destination directory if it doesn\'t exist')
    arg_parser.add_argument(
        '-s', '--src', metavar='SRC', type=str, default=os.getcwd(),
        help='sort this directory (default is current directory)')
    arg_parser.add_argument(
        '-d', '--dest', metavar='DEST', type=str, default=os.getcwd(), 
        help='move files to this directory (ignored if sorting entire folder.\
        If left unspecified, default destination folders will be used)')

    # parse arguments
    args = arg_parser.parse_args()

    # main control
    if numargs <= 1:
        arg_parser.print_help()
        sys.exit()
        
    if args.force == True and args.dest == args.src:
        for key in dest_list:
            if os.path.isdir(dest_list[key]) == False:
                os.makedirs(dest_list[key])
    elif args.force == True:
        if os.path.isdir(args.dest) == False:
            os.makedirs(args.dest)

    # print(args.src,args.dest,args.ext)
    sortfiles(args.src,args.dest,args.ext)



    
